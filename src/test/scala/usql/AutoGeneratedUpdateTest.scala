package usql

import usql.dao.{KeyedCrudBase, SqlColumnar, SqlTabular}
import usql.util.TestBaseWithH2

class AutoGeneratedUpdateTest extends TestBaseWithH2 {

  override protected def baseSql: String =
    """
      |CREATE TABLE tenant (
      |  id SERIAL NOT NULL PRIMARY KEY,
      |  name TEXT
      |);
      |""".stripMargin

  case class Tenant(
      id: Int,
      name: Option[String]
  ) derives SqlTabular

  object Tenant extends KeyedCrudBase[Int, Tenant] {
    override val keyColumn: SqlIdentifier = "id"

    override def keyOf(value: Tenant): Int = value.id

    override lazy val tabular: SqlTabular[Tenant] = summon
  }

  it should "be possible to insert values" in {
    Tenant.findAll() shouldBe empty
    val sample = Tenant(1, Some("Hello World"))
    Tenant.insert(sample)
    Tenant.findAll() shouldBe Seq(sample)
  }

  it should "be possible to use auto generated keys" in {
    sql"INSERT INTO tenant (name) VALUES (${"Alice"})".update.run()
    sql"INSERT INTO tenant (name) VALUES (${"Bob"})".update.run()
    Tenant.findAll() should contain theSameElementsAs Seq(
      Tenant(1, Some("Alice")),
      Tenant(2, Some("Bob"))
    )
  }

  it should "be possible to return auto generated keys" in {
    val id1 = sql"INSERT INTO tenant (name) VALUES (${"Alice"})".update.runAndGetGenerated[Int]()
    val id2 = sql"INSERT INTO tenant (name) VALUES (${"Bob"})".update.runAndGetGenerated[Int]()
    Tenant.findAll() should contain theSameElementsAs Seq(
      Tenant(id1, Some("Alice")),
      Tenant(id2, Some("Bob"))
    )
  }
}
